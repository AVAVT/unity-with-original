{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","useState","parsedRawTx","setParsedRawTx","copied","setCopied","fallbackCopyTextToClipboard","text","textArea","document","createElement","value","style","top","left","position","body","appendChild","focus","select","execCommand","err","console","error","removeChild","useEffect","rawTx","parse","window","location","search","copyTextToClipboard","a","navigator","clipboard","writeText","showCopied","useCallback","setTimeout","className","minHeight","display","flexDirection","justifyContent","padding","textAlign","width","margin","type","onClick","then","readOnly","rows","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"4OAoGeA,EAjGH,WAAO,IAAD,EACsBC,IAAMC,SAAS,MADrC,mBACTC,EADS,KACIC,EADJ,OAEYH,IAAMC,UAAS,GAF3B,mBAETG,EAFS,KAEDC,EAFC,KAWhB,SAASC,EAA4BC,GACnC,IAAMC,EAAWC,SAASC,cAAc,YACxCF,EAASG,MAAQJ,EAGjBC,EAASI,MAAMC,IAAM,IACrBL,EAASI,MAAME,KAAO,IACtBN,EAASI,MAAMG,SAAW,QAE1BN,SAASO,KAAKC,YAAYT,GAC1BA,EAASU,QACTV,EAASW,SAET,IAEE,OADmBV,SAASW,YAAY,QAExC,MAAOC,GACPC,QAAQC,MAAM,iBAAkBF,GAGlCZ,SAASO,KAAKQ,YAAYhB,GA3B5BR,IAAMyB,WAAU,WAAO,IACbC,EAAUC,gBAAMC,OAAOC,SAASC,QAAhCJ,MACJA,GACFvB,EAAeuB,KAEhB,IAyBH,IAAMK,EAAmB,uCAAG,WAAOxB,GAAP,SAAAyB,EAAA,yDACrBC,UAAUC,UADW,yCAEjB5B,EAA4BC,IAFX,gCAMlB0B,UAAUC,UAAUC,UAAU5B,GANZ,iCAOjB,GAPiB,uCASxBe,QAAQC,MAAM,wBAAd,MATwB,mBAUjB,GAViB,yDAAH,sDAcnBa,EAAapC,IAAMqC,aAAY,WACnChC,GAAU,GACViC,YAAW,kBAAMjC,GAAU,KAAQ,OAClC,IAEH,OACE,yBACEkC,UAAU,MACV3B,MAAO,CACL4B,UAAW,QACXC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,QAAS,cAGV1C,EACC,yBAAKU,MAAO,CAAEiC,UAAW,WACvB,wCACA,8GAIA,yBAAKjC,MAAO,CAAEiC,UAAW,OAAQC,MAAO,OAAQC,OAAQ,WACtD,6BACE,4BACEC,KAAK,SACLC,QAAS,kBACPlB,EAAoB7B,GAAagD,MAAK,kBAAMd,SAG7ChC,EAAS,eAAiB,sBAG/B,8BACE+C,UAAQ,EACRxC,MAAOT,EACPkD,KAAK,IACLxC,MAAO,CAAEkC,MAAO,YAKtB,wBAAIlC,MAAO,CAAEiC,UAAW,WAAxB,0BClFYQ,QACW,cAA7BzB,OAAOC,SAASyB,UAEe,UAA7B1B,OAAOC,SAASyB,UAEhB1B,OAAOC,SAASyB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjD,SAASkD,eAAe,SDyHpB,kBAAmB1B,WACrBA,UAAU2B,cAAcC,MACrBX,MAAK,SAAAY,GACJA,EAAaC,gBAEdC,OAAM,SAAAzC,GACLD,QAAQC,MAAMA,EAAM0C,a","file":"static/js/main.09e14e26.chunk.js","sourcesContent":["import React from \"react\";\nimport { parse } from \"query-string\";\n\nconst App = () => {\n  const [parsedRawTx, setParsedRawTx] = React.useState(null);\n  const [copied, setCopied] = React.useState(false);\n\n  React.useEffect(() => {\n    const { rawTx } = parse(window.location.search);\n    if (rawTx) {\n      setParsedRawTx(rawTx);\n    }\n  }, []);\n\n  function fallbackCopyTextToClipboard(text) {\n    const textArea = document.createElement(\"textarea\");\n    textArea.value = text;\n\n    // Avoid scrolling to bottom\n    textArea.style.top = \"0\";\n    textArea.style.left = \"0\";\n    textArea.style.position = \"fixed\";\n\n    document.body.appendChild(textArea);\n    textArea.focus();\n    textArea.select();\n\n    try {\n      const successful = document.execCommand(\"copy\");\n      return successful;\n    } catch (err) {\n      console.error(\"Unable to copy\", err);\n    }\n\n    document.body.removeChild(textArea);\n  }\n\n  const copyTextToClipboard = async (text) => {\n    if (!navigator.clipboard) {\n      return fallbackCopyTextToClipboard(text);\n    }\n\n    try {\n      await navigator.clipboard.writeText(text);\n      return true;\n    } catch (err) {\n      console.error(\"Could not copy text: \", err);\n      return false;\n    }\n  };\n\n  const showCopied = React.useCallback(() => {\n    setCopied(true);\n    setTimeout(() => setCopied(false), 500);\n  }, []);\n\n  return (\n    <div\n      className=\"App\"\n      style={{\n        minHeight: \"100vh\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        padding: \"10px 20px\",\n      }}\n    >\n      {parsedRawTx ? (\n        <div style={{ textAlign: \"center\" }}>\n          <h3>Success!</h3>\n          <p>\n            Paste the following code when instructed in game to complete your\n            registration:\n          </p>\n          <div style={{ textAlign: \"left\", width: \"50vw\", margin: \"0 auto\" }}>\n            <div>\n              <button\n                type=\"button\"\n                onClick={() =>\n                  copyTextToClipboard(parsedRawTx).then(() => showCopied())\n                }\n              >\n                {copied ? \"Code Copied!\" : \"Copy to Clipboard\"}\n              </button>\n            </div>\n            <textarea\n              readOnly\n              value={parsedRawTx}\n              rows=\"5\"\n              style={{ width: \"100%\" }}\n            />\n          </div>\n        </div>\n      ) : (\n        <h3 style={{ textAlign: \"center\" }}>Error: No code found</h3>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}