entity static_property_value_byte_array {
	static_property;
	mutable value: byte_array;
}

function set_static_property_byte_array(structure, property_name: name, value: byte_array) {
	_set_static_property_byte_array(_static_property(structure, property_name), value);
}

function _set_static_property_byte_array(static_property, value: byte_array) {
	val property_value = static_property_value_byte_array @? { static_property };

	if (property_value??) {
		property_value.value = value;
	} else {
		create static_property_value_byte_array(
			static_property,
			value
		);
	}
}

function get_static_property_byte_array(structure, name): byte_array? {
	return _get_static_property_byte_array(_static_property(structure, name));
}

function _get_static_property_byte_array(static_property): byte_array? {
	return static_property_value_byte_array @? {
		static_property
	}?.value;
}

function _create_structure_property_byte_array(structure, name, prop): structure_property {
	val byte_array_props = bytes.from_gtv(prop.prop_type_struct.type_gtv);
	
	val v = if (byte_array_props.value != null) byte_array_props.value!! else x"";
	
	val property = create structure_property(
		structure,
		name = name,
		readonly = prop.readonly.value,
		optional = prop.optional.value,
		type = property_type.byte_array,
		value = v
	);
		
	_create_structure_property_meta_tags(property, prop.meta.tags);
	
	return property;
}

function create_static_property_byte_array(
	structure, 
	name, 
	prop, 
	init_value: gtv?
): static_property {
	val property = create static_property(
		structure,
		name = name,
		readonly = prop.readonly.value,
		optional = prop.optional.value,
		type = property_type.byte_array
	);
	
	_create_static_property_meta_tags(property, prop.meta.tags);
	
	val bytes_def = bytes.from_gtv(prop.prop_type_struct.type_gtv);
	
	val value = bytes_def.value;
	val init_value_bytes = if (init_value??) byte_array.from_gtv(init_value) else null;
	
	require(
		value != null or init_value_bytes != null or prop.optional.value == true,
		"Non-optional byte_array property '" + name + "' is not initialized"
	); 
	
	require(
		prop.readonly.value == false
			or
		((value == null or init_value_bytes == null) and prop.readonly.value == true),
		"Read-only byte_array property '" + name + "' can be initialized only once"
	);
	
	val v = init_value_bytes ?: value;
	
	if (v??) {
		create static_property_value_byte_array(
			property,
			v
		);
	}
	
	return property;
}