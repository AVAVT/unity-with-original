/* instance properties */

function _create_structure_property_integer(structure, name, prop): structure_property {
	val int_props = int.from_gtv(prop.prop_type_struct.type_gtv);
	
	val v = if (int_props.value != null) int_props.value!!.to_gtv().to_bytes() else x"";
	
	val property = create structure_property(
		structure,
		name = name,
		readonly = prop.readonly.value,
		optional = prop.optional.value,
		type = property_type.integer,
		value = v
	);

	_create_structure_property_meta_tags(property, prop.meta.tags);
	
	return property;
}

/* static properties */

entity static_property_value_integer {
	key static_property;
	mutable value: integer;
}

function set_static_property_integer(structure, property_name: name, value: integer) {
	
}

function _set_static_property_integer(static_property, value: integer) {
	val property = static_property_value_integer @? { static_property };
	
	if (property??) {
		property.value = value;
	} else {
		create static_property_value_integer(
			static_property,
			value = value
		);
	}
}


function get_static_property_integer(structure, name): integer? {
	return _get_static_property_integer(_static_property(structure, name));
}

function _get_static_property_integer(static_property): integer?{
	require(static_property.type == property_type.integer);
	return static_property_value_integer @? { 
		static_property
	}.value;
}

function unset_property_s_integer(static_property) {
	delete static_property_value_integer @ { static_property };
}

function create_static_property_integer(
	structure, 
	name, 
	prop, 
	init_value: gtv?
): static_property {
	val property = create static_property(
		structure,
		name = name,
		readonly = prop.readonly.value,
		optional = prop.optional.value,
		type = property_type.integer
	);
	
	_create_static_property_meta_tags(property, prop.meta.tags);
	
	val int_def = int.from_gtv(prop.prop_type_struct.type_gtv);
	
	val value = int_def.value;
	val init_value_int = if (init_value??) integer.from_gtv(init_value) else null;
	
	require(
		value != null or init_value_int != null or prop.optional.value == true,
		"Non-optional property '" + name + "' is not initialized"
	); 
	
	require(
		prop.readonly.value == false
			or
		((value == null or init_value_int == null) and prop.readonly.value == true),
		"Readonly property '" + name + "' can be initialized only once"
	);
	
	val v = init_value_int ?: value;
	
	if (v??) {
		create static_property_value_integer(
			property,
			v
		);
	}
	
	return property;
}